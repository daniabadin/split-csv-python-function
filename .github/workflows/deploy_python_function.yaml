name: 'Deploy Python Function'

on:
  workflow_dispatch:
  push:
    branches:
    - main
    - develop

env: 
  TF_VERSION: "1.1.7"
  TF_RESOURCES_PATH: '${{ github.workspace }}/iac'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  PYTHON_VERSION: "3.8"
  PYTHON_CODE_PATH: '${{ github.workspace }}/code'
  BUILD_PACKAGE_NAME: python_function
  AZURE_FUNCTIONAPP_NAME: "split-csv-python-func"
  AZURE_RESOURCE_GROUP: "uni-labs"
  AZURE_LOCATION: "westeurope"

jobs:
  terraform_plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Login to Azure
        shell: bash
        run: |
          az login --service-principal --username $ARM_CLIENT_ID --password $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID || { echo "::error::Error login into Azure. Most likely there is NOT a SECRET AVAILABLE that contains your Azure credentials."; exit 199; }
          az account set --subscription $ARM_SUBSCRIPTION_ID || { echo "::error::Error setting subscriptcion. Provide a correct subscription. Verify your Azure credentials."; exit 199; }

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_RESOURCES_PATH }}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ${{ env.TF_RESOURCES_PATH }}

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -var="resource_group_name=${AZURE_RESOURCE_GROUP}" -var="location=${AZURE_LOCATION}"
        working-directory: ${{ env.TF_RESOURCES_PATH }}
  
  terraform_apply:
    name: 'terraform apply'
    needs: [terraform_plan]
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Login to Azure
        shell: bash
        run: |
          az login --service-principal --username $ARM_CLIENT_ID --password $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID || { echo "::error::Error login into Azure. Most likely there is NOT a SECRET AVAILABLE that contains your Azure credentials."; exit 199; }
          az account set --subscription $ARM_SUBSCRIPTION_ID || { echo "::error::Error setting subscriptcion. Provide a correct subscription. Verify your Azure credentials."; exit 199; }
  
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_RESOURCES_PATH }}

      # If the branch is main, build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        #if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -var="resource_group_name=${AZURE_RESOURCE_GROUP}" -var="location=${AZURE_LOCATION}"
        working-directory: ${{ env.TF_RESOURCES_PATH }}

  build_python_function:
    name: Build Python Function
    needs: terraform_apply
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Setup Python 3.8 Environment
        uses: actions/setup-python@v1
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # - name: Setup Python virtual env
      #   shell: bash
      #   run: |
      #     python -m venv .venv
      #     source .venv/bin/activate
      #     pip install -r requirements.txt
      #   working-directory: ${{ env.PYTHON_CODE_PATH }}

      # - name: "Zip code"
      #   run: |
      #     pwd
      #     zip -r ${BUILD_PACKAGE_NAME}.zip .
      #   working-directory: ${{ env.PYTHON_CODE_PATH }}

      - name: Upload artifact zip with Python function
        uses: actions/upload-artifact@v2
        with: 
          name: ${{ env.BUILD_PACKAGE_NAME }}
          path: ${{ env.PYTHON_CODE_PATH }}/
          retention-days: 5
          if-no-files-found: error

  deploy_python_function:
    name: Deploy Python Function
    needs: build_python_function
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Download artifact zip with Python function
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.BUILD_PACKAGE_NAME }}

      - name: Login to Azure
        shell: bash
        run: |
          az login --service-principal --username $ARM_CLIENT_ID --password $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID || { echo "::error::Error login into Azure. Most likely there is NOT a SECRET AVAILABLE that contains your Azure credentials."; exit 199; }
          az account set --subscription $ARM_SUBSCRIPTION_ID || { echo "::error::Error setting subscriptcion. Provide a correct subscription. Verify your Azure credentials."; exit 199; }

      - name: pwd
        run: ls -la

      # Deploy Azure functions code
      - name: 'Run Azure Functions Action'
        run: |
          az functionapp deployment source config-zip --timeout 60 -g $AZURE_RESOURCE_GROUP -n $AZURE_FUNCTIONAPP_NAME --src ${BUILD_PACKAGE_NAME}.zip || { echo "Azure API Zip upload error"; exit 15;}
          rm -f $BUILD_PACKAGE_NAME.zip
      